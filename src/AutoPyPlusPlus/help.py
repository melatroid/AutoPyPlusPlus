import tkinter as tk
from tkinter import scrolledtext

def show_help_window(parent, text, title="Hilfe"):
    help_window = tk.Toplevel(parent)
    help_window.title(title)
    help_window.geometry("900x600")  # Du kannst die Gr√∂√üe hier anpassen
    help_window.transient(parent)
    help_window.grab_set()  # Modal-Fenster

    # √úberschrift
    header_label = tk.Label(help_window, text=title, font=("Arial", 14, "bold"), anchor="w")
    header_label.pack(fill="x", padx=10, pady=5)

    # Scrollbarer Textbereich
    text_area = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, font=("Courier", 10))
    text_area.insert(tk.END, text)
    text_area.configure(state="disabled")  # Nur lesbar
    text_area.pack(expand=True, fill="both", padx=10, pady=5)

    # Schlie√üen-Button
    close_button = tk.Button(help_window, text="Schlie√üen", command=help_window.destroy)
    close_button.pack(pady=10)

def show_edit_helper(parent_window):
    help_text = (
        "=== Hilfe ‚Äì Funktionsbeschreibung mit Beispielen ===\n\n"
        "üöÄ **Allgemeine Optionen**\n"
        "‚Ä¢ **Onefile**\n"
        "  Alles in einer einzigen ausf√ºhrbaren EXE-Datei b√ºndeln (praktisch f√ºr einfache Verteilung).\n"
        "‚Ä¢ **Konsole**\n"
        "  L√§sst beim Ausf√ºhren das Konsolenfenster sichtbar (gut f√ºr Debug-Ausgaben).\n"
        "‚Ä¢ **Fenster-Modus**\n"
        "  Anwendung ohne sichtbares Konsolenfenster starten (z.B. f√ºr grafische Benutzeroberfl√§chen).\n"
        "‚Ä¢ **Use PyArmor**\n"
        "  Aktiviert Code-Verschleierung f√ºr zus√§tzlichen Schutz (optional).\n\n"
        "üì¶ **Felder:**\n"
        "‚Ä¢ **Name**\n"
        "  Name des Projekts oder der ausf√ºhrbaren Datei.\n"
        "  Eingabebeispiel:\n"
        "  MeinBackupTool\n\n"
        "‚Ä¢ **Script**\n"
        "  Pfad zum Python-Skript, das kompiliert werden soll.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/backupWizard.py\n\n"
        "‚Ä¢ **Ausgabeordner**\n"
        "  Zielordner f√ºr die erstellte EXE-Datei.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/dist\n\n"
        "‚Ä¢ **Iconpfad**\n"
        "  Pfad zu einer .ico-Datei als Programmsymbol.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/assets/appicon.ico\n\n"
        "‚Ä¢ **Add-Data**\n"
        "  Zus√§tzliche Dateien oder Ordner, die mit der EXE geb√ºndelt werden sollen.\n"
        "  Format: Quellpfad:Zielpfad (bei mehreren Eintr√§gen mit Semikolon trennen).\n"
        "  Eingabebeispiel:\n"
        "  C:/Daten/config.ini:config;C:/Daten/bilder:assets/bilder\n\n"
        "‚Ä¢ **Hidden Imports**\n"
        "  Python-Module, die PyInstaller eventuell nicht automatisch erkennt.\n"
        "  Eingabebeispiel:\n"
        "  requests,lxml,custom_module\n\n"
        "‚Ä¢ **Version-Datei**\n"
        "  Pfad zu einer Datei mit Versionsinformationen.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/version.txt\n\n"
        "‚Ä¢ **Runtime Hook**\n"
        "  Pfad zu einem Python-Skript, das beim Start der Anwendung ausgef√ºhrt wird.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/startup_hook.py\n\n"
        "‚Ä¢ **Splash-Bild**\n"
        "  Pfad zu einem Bild, das beim Start angezeigt wird.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/splashscreen.png\n\n"
        "‚Ä¢ **Spec-Datei**\n"
        "  Pfad zu einer .spec-Datei f√ºr individuelle PyInstaller-Build-Konfigurationen.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/backupWizard.spec\n\n"
        "‚öôÔ∏è **Erweiterte Optionen:**\n"
        "‚Ä¢ **UPX**: Aktiviert Komprimierung der EXE (verkleinert die Dateigr√∂√üe).\n"
        "‚Ä¢ **Debug**: Aktiviert Debug-Modus (hilfreich f√ºr Fehlersuche).\n"
        "‚Ä¢ **Clean**: Alte Build-Dateien vor dem Erstellen l√∂schen.\n"
        "‚Ä¢ **Strip**: Entfernt Debug-Symbole, verkleinert die EXE.\n"
        "‚Ä¢ **Ohne Runtime Key**: Erstellt die EXE ohne Laufzeit-Schl√ºssel.\n"
        "‚Ä¢ **Tcl deaktivieren**: Deaktiviert Tcl/Tk-Support (z.B. wenn nicht ben√∂tigt).\n\n"
        "üìù **Weitere Optionen:**\n"
        "Hier k√∂nnen zus√§tzliche PyInstaller-Parameter direkt eingetragen werden.\n"
        "Eingabebeispiel:\n"
        "--add-binary=\"C:/libs/extra.dll;extra.dll\" --hidden-import=asyncio\n\n"
        "‚úÖ **Tipps f√ºr erfolgreiche Eingaben:**\n"
        "‚Ä¢ **Add-Data**: Absolute Pfade verwenden und sicherstellen, dass Dateien/Ordner existieren.\n"
        "‚Ä¢ **Hidden Imports**: Module ohne Leerzeichen, nur durch Kommas trennen.\n"
        "  Beispiel:\n"
        "  numpy,requests,flask\n"
        "‚Ä¢ **Icon, Version, Splash**: Dateien m√ºssen existieren und korrekt angegeben werden.\n"
        "‚Ä¢ **Ausgabeordner**: Ordner muss existieren oder automatisch erstellt werden k√∂nnen.\n"
        "‚Ä¢ **Script**: Muss ein g√ºltiges Python-Skript sein.\n\n"
        "üñ±Ô∏è **Schaltfl√§chen:**\n"
        "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Projekts.\n"
        "‚Ä¢ **Abbrechen**: Schlie√üt das Editor-Fenster ohne Speichern.\n\n\n"
        
        "üîí **PyArmor-Optionen (Schutz & Verschleierung)**\n"
        "‚Ä¢ **--obf-code <0|1|2>**: Steuert die Obfuskationsebene des Codes (0=keine, 1=normal, 2=hoch).\n"
        "‚Ä¢ **--obf-module <0|1>**: Obfuskiert das gesamte Modul (1=aktiviert).\n"
        "‚Ä¢ **--mix-str**: Verschl√ºsselt Zeichenketten im Code.\n"
        "‚Ä¢ **--no-wrap**: Deaktiviert den Standard-Wrap-Modus.\n"
        "‚Ä¢ **--private**: Aktiviert den privaten Modus (Einschr√§nkung interner Einblicke).\n"
        "‚Ä¢ **--restrict**: Aktiviert restriktiven Modus f√ºr das Paket.\n"
        "‚Ä¢ **--assert-import**: Sicherstellt, dass importierte Module obfuskiert sind.\n"
        "‚Ä¢ **--assert-call**: Sicherstellt, dass aufgerufene Funktionen obfuskiert sind.\n"
        "‚Ä¢ **--platform NAME**: Zielplattform angeben (z.B. windows.x86_64).\n"
        "‚Ä¢ **--use-runtime PATH**: Laufzeitpaket von angegebenem Pfad verwenden.\n"
        "‚Ä¢ **--outer**: Verwendet externen Laufzeitschl√ºssel f√ºr mehr Sicherheit.\n"
        "‚Ä¢ **--expired DATE**: Ablaufdatum setzen (z.B. 2025-12-31).\n"
        "‚Ä¢ **--period N**: √úberpr√ºfungsintervall f√ºr Laufzeitschl√ºssel.\n"
        "‚Ä¢ **--bind-device DEV**: Bindet das Skript an bestimmte Ger√§te (z.B. MAC-Adresse).\n"
        "‚Ä¢ **--pack <onefile|onedir|NAME.spec>**: Verpackt das obfuskierte Projekt.\n"
        "‚Ä¢ **-r, --recursive**: Verschl√ºsselt Dateien in Unterordnern rekursiv.\n"
        "‚Ä¢ **-O PATH**: Ausgabeverzeichnis festlegen.\n"
        "‚Ä¢ **--exclude PATTERN**: Dateien oder Pfade von Obfuskation ausschlie√üen.\n\n"
        "Diese Optionen k√∂nnen in den **PyArmor-Optionen** im Editor direkt angegeben werden.\n\n"
          "üí° **Beispiel-Eingabe:**\n"
        " --platform windows.x86_64 --pack onefile --expired 2025-12-31 --bind-device 08:00:27:12:34:56\n"
        "üñ±Ô∏è **Schaltfl√§chen:**\n"
        "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Projekts.\n"
        "‚Ä¢ **Abbrechen**: Schlie√üt das Editor-Fenster ohne Speichern.\n"
    )

    show_help_window(parent_window, help_text, title="Hilfe ‚Äì Editor")

def show_main_helper(parent_window):
    help_text = (
        "=== Hilfe ‚Äì Hauptfenster ===\n\n"
        "Dieses Fenster dient zur Verwaltung und zum Kompilieren von Projekten.\n"
        "Hier eine √úbersicht aller Funktionen:\n\n"
        "üü© Hotkeys:\n Use Caps Lock for best use \n\n"
        "‚Ä¢ Shift+C: Alle Projekte kompilieren.\n"
        "‚Ä¢ Shift+A: Neues Projekt hinzuf√ºgen.\n"
        "‚Ä¢ Shift+D: Ausgew√§hltes Projekt l√∂schen.\n"
        "‚Ä¢ Shift+Y: Kompiliermodus A/B umschalten.\n"
        "‚Ä¢ Shift+L: Projektdatei (.apyscript) laden.\n"
        "‚Ä¢ Shift+S: Projektdatei (.apyscript) speichern als.\n"
        "‚Ä¢ Shift+E: Arbeitsverzeichnis leeren.\n"
        "‚Ä¢ Shift+T: Design-Theme wechseln.\n"
        "‚Ä¢ Shift+Q: Programm beenden.\n"
        "‚Ä¢ Shift+F: Vollbild Modus.\n"
        "‚Ä¢ Enter: Projekt bearbeiten.\n\n"
        "üü© Skripte Bereich:\n"
        "‚Ä¢ Hinzuf√ºgen (Shift+A): Ein neues Python- oder Spec-Projekt zur Liste hinzuf√ºgen.\n"
        "‚Ä¢ Bearbeiten (Enter): Das ausgew√§hlte Projekt bearbeiten (z.B. Pfade oder Optionen √§ndern).\n"
        "‚Ä¢ L√∂schen: Entfernt das aktuell ausgew√§hlte Projekt aus der Liste.\n\n"
         "üü© Projekte Bereich:\n"       
        "‚Ä¢ Leeren: L√∂scht alle Projekte aus der Liste.\n"
        "‚Ä¢ Laden: L√§dt eine .apyscript-Datei und l√§dt die gespeicherten Projekte.\n"
        "‚Ä¢ Speichern als: Speichert die aktuelle Projektliste als .apyscript oder .spec.\n\n"
        "üü© Projektbereich:\n"
        "‚Ä¢ Inspector: √ñffnet den Debug-Inspector f√ºr die zuletzt erstellte Logdatei.\n"
        "‚Ä¢ Alle kompilieren (Shift+C): Startet die Kompilierung aller ausgew√§hlten Projekte.\n"
        "‚Ä¢ Arbeitsverzeichnis leeren: L√∂scht alle compile_*.log-Dateien und den build-Ordner.\n\n"
        "üü© Header:\n"
        "‚Ä¢ Sprache ausw√§hlen: Wechselt die Sprache der Benutzeroberfl√§che.\n"
        "‚Ä¢ INI laden: L√§dt eine neue INI-Konfigurationsdatei.\n"
        "‚Ä¢ About: Zeigt Informationen √ºber dieses Programm.\n"
        "‚Ä¢ üé® Colors: √Ñndert die Farben f√ºr Modus A/B.\n"
        "‚Ä¢ üñåÔ∏è Design: Wechselt das Design-Theme.\n\n"
        "üü© Treeview:\n"
        "‚Ä¢ Zeigt alle Projekte in der Liste an.\n"
        "‚Ä¢ Checkboxen f√ºr Modus A/B zur Auswahl, welcher Modus verwendet wird.\n"
        "‚Ä¢ Mit Doppelklick oder Enter das Projekt bearbeiten.\n\n"
    )
    show_help_window(parent_window, help_text, title="Hilfe ‚Äì AutoPy++")

def show_spec_helper(parent_window):
    help_text = (
        "=== Hilfe ‚Äì Spec-Editor Beschreibung mit Beispielen ===\n\n"
        "üöÄ **Allgemeine Optionen**\n"
        "‚Ä¢ **Onefile**\n"
        "  B√ºndelt die Anwendung in einer einzigen ausf√ºhrbaren EXE-Datei (ideal f√ºr einfache Verteilung).\n"
        "‚Ä¢ **Konsole**\n"
        "  Zeigt ein Konsolenfenster beim Ausf√ºhren der Anwendung an (n√ºtzlich f√ºr Debugging).\n"
        "‚Ä¢ **Windowed**\n"
        "  Startet die Anwendung ohne ein sichtbares Konsolenfenster (z.B. f√ºr GUI-Anwendungen).\n\n"
        "üì¶ **Felder:**\n"
        "‚Ä¢ **Name**\n"
        "  Der Name der ausf√ºhrbaren Datei oder des Projekts.\n"
        "  Eingabebeispiel:\n"
        "  backupWizard\n\n"
        "‚Ä¢ **Icon**\n"
        "  Pfad zu einer .ico-Datei, die als Symbol f√ºr die EXE verwendet wird.\n"
        "  Eingabebeispiel:\n"
        "  C:/xampp/htdocs/cebterOS/engineering/icon_services.ico\n\n"
        "‚Ä¢ **Spec-Datei**\n"
        "  Pfad zu einer .spec-Datei, die PyInstaller-Build-Konfigurationen enth√§lt.\n"
        "  Eingabebeispiel:\n"
        "  C:/xampp/htdocs/cebterOS/engineering/backupWizard.spec\n\n"
        "‚Ä¢ **Runtime Hook**\n"
        "  Pfad zu einem Python-Skript, das beim Start der Anwendung ausgef√ºhrt wird.\n"
        "  Eingabebeispiel:\n"
        "  C:/Projekte/backupTool/startup_hook.py\n\n"
        "‚Ä¢ **Hidden Imports**\n"
        "  Python-Module, die PyInstaller m√∂glicherweise nicht automatisch erkennt.\n"
        "  Eingabebeispiel:\n"
        "  requests\nlxml\ncustom_module\n"
        "  (Ein Modul pro Zeile oder durch Kommas getrennt)\n\n"
        "‚Ä¢ **Binaries (add_data)**\n"
        "  Zus√§tzliche Dateien oder Ordner, die in die EXE eingebunden werden sollen.\n"
        "  Format: Quellpfad:Zielpfad (mehrere Eintr√§ge in neuen Zeilen).\n"
        "  Eingabebeispiel:\n"
        "  C:/Daten/config.ini:config\nC:/Daten/bilder:assets/bilder\n\n"
        "‚öôÔ∏è **Erweiterte Optionen:**\n"
        "‚Ä¢ **UPX aktivieren**: Komprimiert die EXE-Datei mit UPX, um die Dateigr√∂√üe zu reduzieren.\n"
        "‚Ä¢ **Debug aktiv**: Aktiviert den Debug-Modus f√ºr detaillierte Ausgaben w√§hrend des Build-Prozesses.\n"
        "‚Ä¢ **Clean aktiv**: L√∂scht alte Build-Dateien vor einem neuen Build.\n"
        "‚Ä¢ **Strip aktiv**: Entfernt Debug-Symbole aus der EXE, um die Dateigr√∂√üe zu verringern.\n\n"
        "‚úÖ **Tipps f√ºr erfolgreiche Eingaben:**\n"
        "‚Ä¢ **Binaries (add_data)**: Verwende absolute Pfade und stelle sicher, dass die Dateien/Ordner existieren.\n"
        "‚Ä¢ **Hidden Imports**: Gib Module ohne Leerzeichen an, entweder in neuen Zeilen oder durch Kommas getrennt.\n"
        "  Beispiel:\n"
        "  numpy\nrequests\nflask\n"
        "‚Ä¢ **Icon und Spec-Datei**: Die Dateien m√ºssen existieren und korrekt angegeben werden.\n"
        "‚Ä¢ √úberpr√ºfe Pfade auf Tippfehler, insbesondere bei Gro√ü-/Kleinschreibung.\n\n"
        "üñ±Ô∏è **Schaltfl√§chen:**\n"
        "‚Ä¢ **Datei hinzuf√ºgen**: F√ºgt eine Daterosenkrantz-Dateien einbinden (z.B. Bilder, DLLs).\n"
        "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Spec-Editors.\n"
        "‚Ä¢ **Abbrechen**: Schlie√üt das Spec-Editor-Fenster ohne Speichern.\n"
        "‚Ä¢ **Help**: √ñffnet dieses Hilfefenster mit Anleitungen.\n"
    )
    show_help_window(parent_window, help_text, title="Hilfe ‚Äì Spec-Editor")

def show_nuitka_helper(parent_window):
    help_text = (
        "=== Hilfe ‚Äì Nuitka Compilation Editor ===\n\n"
        "üöÄ **Allgemeine Optionen**\n"
        "‚Ä¢ **Use Nuitka**\n"
        "  Aktiviert die Kompilierung mit Nuitka, um Python-Skripte in ausf√ºhrbare Programme umzuwandeln. Deaktiviert bleibt das Skript ein normales Python-Programm, das Python ben√∂tigt.\n"
        "‚Ä¢ **Standalone**\n"
        "  Erstellt eine eigenst√§ndige Anwendung mit allen Abh√§ngigkeiten (z. B. Module, Bibliotheken) in einem Ordner. Ideal f√ºr die Verteilung auf Systeme ohne Python. Erzeugt gr√∂√üere Dateien (oft 100 MB+).\n"
        "‚Ä¢ **Onefile**\n"
        "  Packt die gesamte Anwendung in eine einzige .exe-Datei (Windows) oder ein Programm (Linux/macOS). Beim Start wird die Datei tempor√§r entpackt, was die Startzeit verl√§ngern kann.\n"
        "‚Ä¢ **Console**\n"
        "  √ñffnet ein Konsolenfenster beim Programmstart, das Ausgaben (z. B. print oder Fehlermeldungen) anzeigt. N√ºtzlich f√ºr Debugging, f√ºr Endnutzer oft deaktivieren.\n\n"
        "üì¶ **Weitere Optionen**\n"
        "‚Ä¢ **Follow Imports**\n"
        "  Erkennt und bindet alle importierten Module automatisch ein (z. B. numpy, requests). Spart manuelle Konfiguration, kann aber die Dateigr√∂√üe erh√∂hen. Deaktivieren, wenn du Module gezielt einbinden willst.\n"
        "‚Ä¢ **Follow Stdlib**\n"
        "  Bindet Python-Standardbibliotheken (z. B. os, sys) ein, falls nicht automatisch erkannt. Selten n√∂tig, nur bei obskuren Modulen wie ctypes aktivieren.\n"
        "‚Ä¢ **Plugins**\n"
        "  Aktiviert Unterst√ºtzung f√ºr spezielle Bibliotheken (z. B. --plugin-enable=pyqt6 f√ºr PyQt6). Ohne passende Plugins k√∂nnen GUI- oder Datenbibliotheken fehlerhaft kompiliert werden.\n"
        "‚Ä¢ **Extra Options**\n"
        "  Freitextfeld f√ºr zus√§tzliche Nuitka-Parameter, z. B. --include-module=mein_modul oder --noinclude-pandas. Falsche Eingaben f√ºhren zu Fehlern, siehe Nuitka-Dokumentation.\n"
        "‚Ä¢ **Output Dir**\n"
        "  Der Ordner, in den die kompilierten Dateien geschrieben werden. Muss existieren und beschreibbar sein, z. B. C:\\MeinProjekt\\output.\n\n"
        "‚öôÔ∏è **Leistungsoptionen**\n"
        "‚Ä¢ **LTO (Link Time Optimization)**\n"
        "  Optimiert die Bin√§rdatei f√ºr kleinere Gr√∂√üe und schnellere Ausf√ºhrung. Optionen:\n"
        "  - **auto**: Nuitka w√§hlt basierend auf Projektgr√∂√üe (Standard).\n"
        "  - **yes**: Maximale Optimierung, aber l√§ngere Kompilierungszeit und h√∂herer RAM-Verbrauch (8 GB+).\n"
        "  - **no**: Schnellere Kompilierung, gr√∂√üere Datei. Bei Fehlern no testen.\n"
        "‚Ä¢ **Jobs**\n"
        "  Anzahl paralleler Kompilierungsprozesse (1, 2, 4, 8). Mehr Jobs beschleunigen, verbrauchen aber mehr RAM. F√ºr moderne PCs: 4 oder 8, bei wenig RAM: 1 oder 2.\n"
        "‚Ä¢ **Show Progress / Memory / Scons**\n"
        "  Zeigt Details w√§hrend der Kompilierung:\n"
        "  - **Progress**: Fortschritt (z. B. 'Modul X wird kompiliert').\n"
        "  - **Memory**: Speicherverbrauch, hilfreich bei LTO.\n"
        "  - **Scons**: Details des Build-Systems, f√ºr fortgeschrittene Nutzer.\n"
        "‚Ä¢ **Windows UAC Admin**\n"
        "  Fordert Admin-Rechte beim Programmstart (UAC-Abfrage). Nur aktivieren, wenn die Anwendung Systemzugriffe ben√∂tigt (z. B. Schreiben in C:\\Program Files).\n\n"
        "üé® **Windows-spezifische Optionen**\n"
        "‚Ä¢ **Windows Icon**\n"
        "  Pfad zu einer .ico-Datei (z. B. C:\\icon.ico) f√ºr das Programmsymbol in Taskleiste/Explorer. Muss mehrere Aufl√∂sungen (16x16, 32x32) enthalten.\n"
        "‚Ä¢ **Windows Splash**\n"
        "  Pfad zu einem Bild (z. B. C:\\splash.png), das beim Programmstart angezeigt wird. N√ºtzlich bei langer Ladezeit, niedrige Aufl√∂sung bevorzugen.\n\n"
        "‚úÖ **Tipps**\n"
        "‚Ä¢ √úberpr√ºfe Script-Pfad und Output-Ordner vor der Kompilierung.\n"
        "‚Ä¢ Nutze nur Plugins, die mit deinen Bibliotheken kompatibel sind (siehe Nuitka-Dokumentation).\n"
        "‚Ä¢ Security Level Buttons w√§hlen vordefinierte Einstellungen (z. B. schnell oder sicher). Mit Analyse pr√ºfen.\n"
        "‚Ä¢ Aktiviere Show Progress/Memory bei Fehlern, um Probleme zu finden.\n\n"
        "üñ±Ô∏è **Schaltfl√§chen**\n"
        "‚Ä¢ **Analyse**: Pr√ºft Pfade, Plugins und Einstellungen auf Fehler vor der Kompilierung.\n"
        "‚Ä¢ **Save**: Speichert die Einstellungen und schlie√üt den Editor.\n"
        "‚Ä¢ **Cancel**: Schlie√üt ohne Speichern.\n"
        "‚Ä¢ **Help**: √ñffnet dieses Hilfefenster.\n"
    )
    show_help_window(parent_window, help_text, title="Hilfe ‚Äì Nuitka Compilation Editor")    
    